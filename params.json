{"name":"Projectile","body":"# Synopsis\r\n\r\nProjectile is a project interaction library for Emacs. Its goal is to\r\nprovide a nice set of features operating on a project level without\r\nintroducing external dependencies. For instance - finding project\r\nfiles is done in pure Emacs Lisp without the use of GNU find.\r\n\r\nThis library provides easy project management and navigation. The\r\nconcept of a project is pretty basic - just a folder containing\r\nspecial file. Currently `git`, `mercurial` and `bazaar` repos are\r\nconsidered projects by default. If you want to mark a folder\r\nmanually as a project just create an empty `.projectile` file in\r\nit. Some of projectile's features:\r\n\r\n* jump to a file in project\r\n* jump to a project buffer\r\n* multi-occur in project buffers\r\n* grep in project\r\n* regenerate project etags\r\n\r\n# Installation\r\n\r\n## Manual\r\nJust drop `projectile.el` somewhere in your `load-path`. I favour the\r\nfolder `~/.emacs.d/vendor`:\r\n\r\n```\r\n(add-to-list 'load-path \"~/emacs.d/vendor\")\r\n```\r\n\r\nYou can enable projectile globally like this:\r\n\r\n```\r\n(require 'projectile)\r\n(projectile-global-mode) ;; to enable in all buffers\r\n```\r\n\r\nTo enable projectile only in select modes:\r\n\r\n```\r\n(add-hook 'ruby-mode-hook #'(lambda () (projectile-mode)))\r\n```\r\n\r\nIf you'd like to enable project files caching (useful in large\r\nprojects where indexing the project's file can take a while) add this\r\nas well:\r\n\r\n```\r\n(setq projectile-enable-caching t)\r\n```\r\n\r\n## Marmalade\r\n\r\nIf you're an Emacs 24 user or you have a recent version of package.el\r\nyou can install projectile from the [Marmalade](http://marmalade-repo.org/) repository.\r\n\r\n## Emacs Prelude\r\n\r\nProjectile is naturally part of the\r\n[Emacs Prelude](http://batsov.com/emacs-prelude). If you're a Prelude\r\nuser - Projectile is already properly configured and ready for\r\naction.\r\n\r\n# Usage\r\n\r\nHere's a list of the interactive Emacs Lisp functions, provided by projectile:\r\n\r\n* `projectile-jump-to-project-file` (C-c p j)\r\n* `projectile-grep-in-project` (C-c p f)\r\n* `projectile-replace-in-project` (C-c p r)\r\n* `projectile-switch-to-buffer` (C-c p b)\r\n* `projectile-multi-occur` (C-c p o)\r\n* `projectile-regenerate-tags` (C-c p t)\r\n* `projectile-invalidate-project-cache` (C-c p i)\r\n\r\n## Helm Integration\r\n\r\nProjectile can be integrated with\r\n[Helm](https://github.com/emacs-helm/helm) via\r\n`helm-c-source-projectile` source (available in `helm-projectile.el`). There is also an example function\r\nfor calling Helm with the Projectile file source. You can call it like\r\nthis:\r\n\r\n```\r\nM-x helm-projectile\r\n```\r\n\r\nor even better - bind it to a keybinging like this:\r\n\r\n```\r\n(global-set-key (kbd \"C-c h\") 'helm-projectile)\r\n```\r\n\r\nObviously you need to have Helm installed for this to work :-)\r\n\r\n# Caveats\r\n\r\n* Traversing the project directory programmatically (instead of using\r\n  something like GNU find) is not very fast. On the other hand - it's\r\n  portable. Unlike\r\n  [find-file-in-project](https://github.com/bbatsov/find-file-in-project),\r\n  projectile's jump-to-file will work on any OS.\r\n* To compensate for the lack of speed - a cache can be created when a\r\n  project is traversed. That cache is not automatically updated\r\n  (presently) so you might want to invalidate it manually from time to\r\n  time (or disable it completely for small projects).\r\n* Some operations like find/replace depend (presently) on external\r\n  utilities such as find and perl.\r\n\r\n# Contributors\r\n\r\nNone at the moment. You could be the first!\r\n","tagline":"Project navigation and management library for Emacs","google":"UA-22917580-1","note":"Don't delete this file! It's used internally to help with page regeneration."}